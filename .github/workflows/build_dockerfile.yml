name: Fetch Updated Files & Trigger CodeBuild.
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - merge_test
    types:
      - closed
env:
  FILE_NAMES: "Dockerfile aws-sdk-cpp.spec build_aws-sdk.sh build_gcc.sh getminiodeps.sh stagemainartifacts.sh"

jobs:
  check_files_trigger_codebuild:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: check_files_trigger_codebuild
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
      - name: Set Changed Files into a variable
        run: |
          echo "CHANGED_FILES_IN_COMMIT=${{ steps.changed-files.outputs.all_changed_files }}" >> $GITHUB_ENV
      - name: Inline Python Script
        run:  |
          import os
          RUN_SCRIPT = ""
          scipts_file_check = ['build_aws-sdk.sh', 'build_gcc.sh']
          print(f"File name to check are {os.environ.get('FILE_NAMES')}")
          print(f"Changed Files in a commit are {os.environ.get('CHANGED_FILES_IN_COMMIT')}")
          files_to_check = os.environ.get('FILE_NAMES').split(" ")
          files_changed_in_commit = os.environ.get('CHANGED_FILES_IN_COMMIT').split(" ")
          files_changed_in_commit = [files.split("/")[-1] for files in files_changed_in_commit]
          print(f"Files to check are {files_to_check} & Files updated in the commit are {files_changed_in_commit}")
          matched_files = set(files_to_check) & set(files_changed_in_commit)
          print(f"Matched Files are: {matched_files}")
          env_file = os.getenv('GITHUB_ENV')
          with open(env_file, "a") as file:
            if matched_files:
              file.write("TRIGGER_CODEBUILD=True\n")
              if len(set(scipts_file_check) & set(files_changed_in_commit)) == 2:
                RUN_SCRIPT = "ALL"
                file.write("RUN_SCRIPT=ALL")
              elif len(set(scipts_file_check) & set(files_changed_in_commit)) == 1:
                RUN_SCRIPT = list(set(scipts_file_check) & set(files_changed_in_commit))[0]
                RUN_SCRIPT = f"RUN_SCRIPT={RUN_SCRIPT}"
                file.write(RUN_SCRIPT)
              elif len(set(scipts_file_check) & set(files_changed_in_commit)) == 0:
                RUN_SCRIPT = "None"
                file.write("RUN_SCRIPT=None") 
            else:
              file.write("TRIGGER_CODEBUILD=False")
        shell: python
      - name: Read Env Variable
        run:  |
          echo ${{ env.TRIGGER_CODEBUILD }}
          echo ${{ env.RUN_SCRIPT }}
      - name: Configure AWS Credentials
        if: env.TRIGGER_CODEBUILD == 'True'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Build DSS On Code Build
        if: env.TRIGGER_CODEBUILD == 'True'
        uses: aws-actions/aws-codebuild-run-build@v1
        with:
          project-name: DSS
          env-vars-for-codebuild: |
            RUN_SCRIPT
        env:
          RUN_SCRIPT: ${{ env.RUN_SCRIPT }}
      - name: Run this if no files Matched in Commit
        if: env.TRIGGER_CODEBUILD == 'False'
        run:
          echo "Code Build is not triggered as no matching files found in the commit."

  archive_files_to_main_if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    name: archive_files_to_main_if_merged
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1
      - name: Fetch the latest artifacts path
        run:  |
          echo "LATEST_ARTIFACTS=$(aws s3 ls s3://dss-artifacts/builds/DSS/ | grep -Eo '[0-9]{1,4}' | tail -1)" >> $GITHUB_ENV
      - name: Archive Files to main
        run:  |
          aws s3 cp --recursive s3://dss-artifacts/builds/DSS/$LATEST_ARTIFACTS/ s3://dss-artifacts/main/ --exclude "*" --include "*.rpm"
          echo "Latest artifacts are in main folder now."